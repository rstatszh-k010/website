---
title: "{{< var md-03.titel >}}"
subtitle: "{{< var course.long-titel >}}"
author: "Lars Schöbitz"
date: "2025-03-11"
date-format: "MMM D, YYYY"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
footer: "[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})"
editor: source
execute:
  freeze: auto
params:
    modul: 3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(countdown)
library(tidyverse)
library(epoxy)
library(gapminder)
library(ggthemes)
```

## Lernziele (für diese Woche)

```{r}
#| label: lernziele

lernziele <- readr::read_csv(here::here("data/tbl-01-rstatszh-lernziele.csv")) |> 
  dplyr::filter(modul == params$modul) |>
  dplyr::pull(lernziele)

```

```{epoxy}
{1:length(lernziele)}. {lernziele[1:length(lernziele)]}
```

# Datentransformation mit dplyr  {background-color="#4C326A"}

## Eine Grammatik der Datenmanipulation... {.smaller}

... basierend auf den Konzepten von Funktionen als Verben, die Dataframes manipulieren

:::: {.columns}

::: {.column width="40%"}

```{r dplyr-part-of-tidyverse, echo=FALSE, out.width="70%", caption = "dplyr is part of the tidyverse"}
knitr::include_graphics("img/md-03/dplyr-part-of-tidyverse.png")
```

:::

::: {.column width="60%"}

- `filter`: wählt Zeilen aus, die den Kriterien entsprechen
- `arrange`: Zeilen neu ordnen
- `select`: Spalten nach Namen auswählen
- `rename`: Spalten umbenennen
- `mutate`: neue Variablen hinzufügen
- `summarise`: Variablen auf Werte reduzieren
- `group_by`: für gruppierte Operationen
- ... (viele mehr)
:::

::::

## dplyr rules

Regeln der `dplyr`-Funktionen:

::: {.incremental}

- Das erste Argument ist immer ein Dataframe.
- Nachfolgende Argumente sagen, was mit diesem Dataframe geschehen soll.
- Gibt immer einen Dataframe zurück.
- Nichts wird an Ort und Stelle verändert.

:::

## Funktionen & Argumente {auto-animate="true"}

```{r}
#| code-line-numbers: "3-4"
#| eval: false
#| echo: true
library(dplyr)

filter(.data = gapminder, 
       year == 2007)
```

-   Funktion: `filter()`
-   Argument: `.data =`
-   Argumente, die folgen: `year == 2007` [Was ist mit den Daten gemacht wird]{.highlight-yellow}

## Objekte {auto-animate="true"}

```{r}
#| eval: false
#| code-line-numbers: "3-4"
#| echo: true
library(dplyr)

gapminder_2007 <- filter(.data = gapminder, 
                            year == 2007)
```

-   Funktion: `filter()`
-   Argument: `.data =`
-   Argumente, die folgen: `year == 2007` [Was ist mit den Daten gemacht wird]{.highlight-yellow}
-   Daten (Objekt): `gapminder_2007`

## Operatoren {auto-animate="true"}

```{r}
#| eval: false
#| code-line-numbers: "3-4"
#| echo: true
library(dplyr)

gapminder_2007 <- gapminder |> 
  filter(year == 2007) 
```

-   Funktion: `filter()`
-   Argument: `.data =`
-   Argumente, die folgen: `year == 2007` [Was ist mit den Daten gemacht wird]{.highlight-yellow}
-   Daten (Objekt): `gapminder_2007`
-   Zuweisungsoperator: `<-`
-   Pipe Operator: `|>`

## Grafik {auto-animate="true" .smaller}

```{r}
#| eval: true
#| code-line-numbers: "3-4,6"
#| echo: true
#| fig.width: 4
#| fig.asp: 0.618

library(dplyr)

gapminder_2007 <- gapminder |> 
  filter(year == 2007) 

ggplot(data = gapminder_2007,
       mapping = aes(x = continent,
                     y = lifeExp,
                     fill = continent)) +
  geom_boxplot(outlier.shape = NA) 
```

# Wir sind dran: Treibhausgasemissionen im Kanton Zürich {background-color="#4C326A"}

## Daten {.smallest}

```{r}
#| echo: true
#| eval: false
treibhausgase <- read_csv("daten/ktzh-treibhausgase.csv")

```

```{r}
#| echo: false
treibhausgase <- read_csv(here::here("folien/daten/ktzh-treibhausgase.csv"))

```

```{r}
#| echo: true
#| eval: false

head(treibhausgase)
```

<br>

```{r}
#| echo: false

head(treibhausgase) |> 
  knitr::kable(digits = 1)
```

<br>

. . .

```{r}
#| echo: true
ncol(treibhausgase)
```

<br>

. . .

```{r}
#| echo: true
nrow(treibhausgase)
```

## Data {.smaller .scrollable}

```{r}
#| echo: true
#| eval: false
treibhausgase |> 
  distinct(hauptgruppe, untergruppe)
```


```{r}
#| echo: false
#| eval: true
treibhausgase |> 
  distinct(hauptgruppe, untergruppe) |> 
  knitr::kable()
```

## Wir sind dran: md-03-uebungen

::: task
1. Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).
2. Öffne den rstatszh-k010 Arbeitsbereich (Workspace) für den Kurs.
3. Klicke auf [Continue]{.highlight-yellow} neben [md-03-uebungen]{.highlight-yellow}.
4. Suche im Dateimanager im Fenster unten rechts die Datei [`01-dplyr-wir.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.
:::

```{r}
countdown(20)
```

## Pause machen

[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.

![](img/md-03/get-up-and-move.png){width="50%"}

```{r}
countdown(minutes = 10)
```

::: footer
Bild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::

## Ihr seid dran: 02-dplyr-ihr.qmd

::: task
1. Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).
2. Öffne den rstatszh-k010 Arbeitsbereich (Workspace) für den Kurs.
3. Klicke auf [Continue]{.highlight-yellow} neben [md-03-uebungen]{.highlight-yellow}.
4. Suche im Dateimanager im Fenster unten rechts die Datei [`02-dplyr-ihr.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.
5. Folge den Anweisungen in der Datei.
:::
```{r}
countdown(25)
```

## R Terminologie

```{r}
#| eval: false
#| echo: true
library(dplyr)

treibhausgase_verkehr <- treibhausgase |> 
    filter(hauptgruppe == "Verkehr", jahr == 2022) 
```

-   Funktion: `filter()`
-   Argumente, die folgen: `hauptgruppe == "Verkehr"` [Was ist mit den Daten gemacht wird]{.highlight-yellow}
-   Daten (Objekt): `treibhausgase_verkehr`
-   Zuweisungsoperator: `<-`
-   Pipe Operator: `|>`

## Aufgabe: Verbundenes Streudiagram {.scrollable}

{{< fa thumbs-up >}} Großartig für Zeitreihendaten {{< fa calendar >}}

::: small

1.  Nutze die Daten treibhausgase_gebaeude und die Funktion `ggplot()`, um ein verbundenmes Streudiagramm mit `geom_point()` und `geom_line()` zu erstellen.

Definiere folgende visuellen Eigenschaften:

-   jahr auf der x-Achse;
-   emission auf der y-Achse;
-   untergruppe zur Einfärbung mit dem Argument `color = untergruppe` innerhalb von `aes()`

3.  Ändere die Farben mit `scale_color_colorblind()`.

:::

```{r}
#| fig.width: 7
#| fig.asp: 0.618
#| out-width: 100%
#| output-location: slide
#| echo: true

treibhausgase |> 
    filter(hauptgruppe == "Gebäude") |> 
    ggplot(aes(x = jahr, y = emission, color = untergruppe)) +
    geom_point() +
    geom_path() +
    scale_color_colorblind()
```

## Wir sind dran: 03-dplyr-wir.qmd

::: task
1. Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).
2. Öffne den rstatszh-k010 Arbeitsbereich (Workspace) für den Kurs.
3. Klicke auf [Continue]{.highlight-yellow} neben [md-03-uebungen]{.highlight-yellow}.
4. Suche im Dateimanager im Fenster unten rechts die Datei [`03-dplyr-wir.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.
:::
```{r}
countdown(25)
```

## Pause machen

[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.

![](img/md-03/get-up-and-move.png){width="50%"}

```{r}
countdown(minutes = 5)
```

::: footer
Bild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::

## Zeitpuffer: 03-dplyr-wir.qmd

::: {.hand-purple-large style="text-align: center;"}
Welche Konzepte kann ich nochmals erklären?
:::
```{r}
countdown(15)
```

# Zusatzaufgaben Modul 3 {background-color="#4C326A"}

## Modul 3 Dokumentation

::: learn-more
[rstatszh-k010.github.io/website/module/md-03.html](https://rstatszh-k010.github.io/website/module/md-03.html)

```{=html}
<iframe src="https://rstatszh-k010.github.io/website/module/md-03.html" width="100%" height="500" style="border:2px solid #123233;" title="Module 3 Dokumentation"></iframe>
```
:::

## Zusatzaufgaben Abgabedatum

-   Abgabedatum: [Montag, 14. Oktober]{.highlight-yellow}
-   Korrektur- und Feedbackphase bis zu: Donnerstag, 17. Oktober 

# Danke {background-color="#4C326A"}

## Danke! `r emo::ji("sunflower")` 

Folien erstellt mit revealjs und Quarto: https://quarto.org/docs/presentations/revealjs/ 

Access slides als [PDF auf GitHub](https://github.com/rstatszh-k010/website/raw/main/folien/md-03-datentransformation.pdf)

Alle Materialien sind lizenziert unter [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).